# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: vectors.proto, lights.proto, battery.proto, basic_robot.proto, gnss.proto, location.proto, motor.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List, Optional

import betterproto
import grpclib


class LightState(betterproto.Enum):
    """Mirrors flatbuffers techlab::LightState"""

    LS_Off = 0
    LS_On = 1
    LS_Blinking = 2
    LS_Breating = 3
    LS_Auto = 4


class BatteryState(betterproto.Enum):
    """Mirrors flatbuffers techlab::BatteryState"""

    BS_OK = 0
    BS_Overcurrent = 1
    BS_Overtemperature = 2
    BS_Overvoltage = 3
    BS_Undertemperature = 4
    BS_Undervoltage = 5


class RobotControlState(betterproto.Enum):
    """Mirrors flatbuffers techlab::RobotControlState"""

    RCS_Normal = 0
    RCS_Estop = 1
    RCS_Fault = 2


class RobotControlMode(betterproto.Enum):
    """Mirrors flatbuffers techlab::RobotControlMode"""

    RCM_Standby = 0
    RCM_RC = 1
    RCM_External = 2


class GNSSFixType(betterproto.Enum):
    """Mirrors flatbuffers techlab::GNSSFixType"""

    GFT_NoFix = 0
    GFT_Time = 1
    GFT_Fix2D = 2
    GFT_Fix3D = 3
    GFT_RTK = 4


class MotorFault(betterproto.Enum):
    MF_None = 0
    MF_Undervolt = 1
    MF_Overload = 2
    MF_Overtemp = 3
    MF_Fault = 4


@dataclass
class Vector2(betterproto.Message):
    x: float = betterproto.double_field(1)
    y: float = betterproto.double_field(2)


@dataclass
class Vector2f(betterproto.Message):
    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)


@dataclass
class Vector3(betterproto.Message):
    x: float = betterproto.double_field(1)
    y: float = betterproto.double_field(2)
    z: float = betterproto.double_field(3)


@dataclass
class Vector3f(betterproto.Message):
    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)
    z: float = betterproto.float_field(3)


@dataclass
class Vector4(betterproto.Message):
    x: float = betterproto.double_field(1)
    y: float = betterproto.double_field(2)
    z: float = betterproto.double_field(3)
    w: float = betterproto.double_field(4)


@dataclass
class Vector4f(betterproto.Message):
    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)
    z: float = betterproto.float_field(3)
    w: float = betterproto.float_field(4)


@dataclass
class Transform(betterproto.Message):
    position: "Vector3" = betterproto.message_field(1)
    quaternion: "Vector4" = betterproto.message_field(2)


@dataclass
class LightCommand(betterproto.Message):
    state: "LightState" = betterproto.enum_field(1)
    intensity: float = betterproto.float_field(2)


@dataclass
class BatteryDescriptor(betterproto.Message):
    state: "BatteryState" = betterproto.enum_field(1)
    state_of_charge: float = betterproto.float_field(2)
    current: float = betterproto.float_field(3)
    temperature: float = betterproto.float_field(4)
    cell_voltages: List[int] = betterproto.uint32_field(5)


@dataclass
class GetRobotStateRequest(betterproto.Message):
    pass


@dataclass
class GetRobotStateReply(betterproto.Message):
    control_state: "RobotControlState" = betterproto.enum_field(1)
    control_mode: "RobotControlMode" = betterproto.enum_field(2)


@dataclass
class TakeControlRequest(betterproto.Message):
    pass


@dataclass
class TakeControlReply(betterproto.Message):
    pass


@dataclass
class MotionRequest(betterproto.Message):
    linear_vel: "Vector2" = betterproto.message_field(1)
    angular_vel: float = betterproto.double_field(2)


@dataclass
class MotionReply(betterproto.Message):
    pass


@dataclass
class GetLightsRequest(betterproto.Message):
    pass


@dataclass
class GetLightsReply(betterproto.Message):
    lights: List[str] = betterproto.string_field(1)


@dataclass
class SetLightRequest(betterproto.Message):
    name: str = betterproto.string_field(1)
    command: "LightCommand" = betterproto.message_field(2)


@dataclass
class SetLightReply(betterproto.Message):
    pass


@dataclass
class GetBatteriesRequest(betterproto.Message):
    pass


@dataclass
class GetBatteriesReply(betterproto.Message):
    batteries: Dict[str, "BatteryDescriptor"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass
class GNSSDateTime(betterproto.Message):
    year: int = betterproto.uint32_field(1)
    month: int = betterproto.uint32_field(2)
    day: int = betterproto.uint32_field(3)
    hour: int = betterproto.uint32_field(4)
    minute: int = betterproto.uint32_field(5)
    second: int = betterproto.uint32_field(6)
    nano: int = betterproto.int32_field(7)


@dataclass
class GNSSFix(betterproto.Message):
    date_time: "GNSSDateTime" = betterproto.message_field(1)
    fix: "GNSSFixType" = betterproto.enum_field(2)
    longitude: float = betterproto.double_field(3)
    latitude: float = betterproto.double_field(4)
    height: float = betterproto.float_field(5)
    velocity: "Vector3" = betterproto.message_field(6)
    ground_speed: float = betterproto.float_field(7)
    heading: float = betterproto.float_field(8)
    accuracy_xy: float = betterproto.float_field(9)
    accuracy_z: float = betterproto.float_field(10)
    accuracy_speed: float = betterproto.float_field(11)
    accuracy_yaw: float = betterproto.float_field(12)
    used_satellites: int = betterproto.uint32_field(13)


@dataclass
class ListFramesRequest(betterproto.Message):
    pass


@dataclass
class ListFramesReply(betterproto.Message):
    frame_tree: Dict[str, str] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass
class GetTransformRequest(betterproto.Message):
    reference: str = betterproto.string_field(1)
    frame: str = betterproto.string_field(2)


@dataclass
class GetTransformReply(betterproto.Message):
    transform: "Transform" = betterproto.message_field(1)


@dataclass
class GetGNSSRequest(betterproto.Message):
    pass


@dataclass
class GetGNSSReply(betterproto.Message):
    fix: "GNSSFix" = betterproto.message_field(1)


@dataclass
class MotorDescriptor(betterproto.Message):
    fault: "MotorFault" = betterproto.enum_field(1)
    speed_rpm: float = betterproto.float_field(2)
    current: float = betterproto.float_field(3)
    voltage: float = betterproto.float_field(4)
    temperature: float = betterproto.float_field(5)


class BasicRobotControlStub(betterproto.ServiceStub):
    async def get_robot_state(self) -> GetRobotStateReply:
        request = GetRobotStateRequest()

        return await self._unary_unary(
            "/techlab.api.BasicRobotControl/GetRobotState",
            request,
            GetRobotStateReply,
        )

    async def take_control(self) -> TakeControlReply:
        request = TakeControlRequest()

        return await self._unary_unary(
            "/techlab.api.BasicRobotControl/TakeControl",
            request,
            TakeControlReply,
        )

    async def move(
        self, *, linear_vel: Optional["Vector2"] = None, angular_vel: float = 0
    ) -> MotionReply:
        request = MotionRequest()
        if linear_vel is not None:
            request.linear_vel = linear_vel
        request.angular_vel = angular_vel

        return await self._unary_unary(
            "/techlab.api.BasicRobotControl/Move",
            request,
            MotionReply,
        )

    async def get_lights(self) -> GetLightsReply:
        request = GetLightsRequest()

        return await self._unary_unary(
            "/techlab.api.BasicRobotControl/GetLights",
            request,
            GetLightsReply,
        )

    async def set_light(
        self, *, name: str = "", command: Optional["LightCommand"] = None
    ) -> SetLightReply:
        request = SetLightRequest()
        request.name = name
        if command is not None:
            request.command = command

        return await self._unary_unary(
            "/techlab.api.BasicRobotControl/SetLight",
            request,
            SetLightReply,
        )

    async def get_batteries(self) -> GetBatteriesReply:
        request = GetBatteriesRequest()

        return await self._unary_unary(
            "/techlab.api.BasicRobotControl/GetBatteries",
            request,
            GetBatteriesReply,
        )


class LocationStub(betterproto.ServiceStub):
    async def list_frames(self) -> ListFramesReply:
        request = ListFramesRequest()

        return await self._unary_unary(
            "/techlab.api.Location/ListFrames",
            request,
            ListFramesReply,
        )

    async def get_transform(
        self, *, reference: str = "", frame: str = ""
    ) -> GetTransformReply:
        request = GetTransformRequest()
        request.reference = reference
        request.frame = frame

        return await self._unary_unary(
            "/techlab.api.Location/GetTransform",
            request,
            GetTransformReply,
        )

    async def get_g_n_s_s(self) -> GetGNSSReply:
        request = GetGNSSRequest()

        return await self._unary_unary(
            "/techlab.api.Location/GetGNSS",
            request,
            GetGNSSReply,
        )
