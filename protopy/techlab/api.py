# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: vectors.proto, lights.proto, battery.proto, power.proto, points.proto, basic_robot.proto, camera.proto, gnss.proto, location.proto, motor.proto, omnibot.proto, tourelle.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncGenerator, Dict, List, Optional

import betterproto
import grpclib


class LightState(betterproto.Enum):
    """Mirrors flatbuffers techlab::LightState"""

    LightState_On = 0
    LightState_BlinkingFast = 1
    LightState_BlinkingSlow = 2
    LightState_Breating = 3
    LightState_Auto = 4


class BatteryState(betterproto.Enum):
    """Mirrors flatbuffers techlab::BatteryState"""

    BatteryState_OK = 0
    BatteryState_Overcurrent = 1
    BatteryState_Overtemperature = 2
    BatteryState_Overvoltage = 3
    BatteryState_Undertemperature = 4
    BatteryState_Undervoltage = 5


class PointFormat(betterproto.Enum):
    """Mirrors flatbuffers techlab::PointFormat"""

    PointFormat_XY_44 = 0
    PointFormat_XYZ_444 = 1
    PointFormat_XYBGRA_441111 = 2
    PointFormat_XYZBGRA_4441111 = 3
    PointFormat_XYYaw_444 = 4


class RobotControlState(betterproto.Enum):
    """Mirrors flatbuffers techlab::RobotControlState"""

    RobotControlState_Normal = 0
    RobotControlState_Estop = 1
    RobotControlState_Fault = 2


class RobotControlMode(betterproto.Enum):
    """Mirrors flatbuffers techlab::RobotControlMode"""

    RobotControlMode_Standby = 0
    RobotControlMode_RC = 1
    RobotControlMode_External = 2


class Whitebalance(betterproto.Enum):
    """Mirrors flatbuffers techlab::Whitebalance"""

    Whitebalance_Auto = 0
    Whitebalance_OnePush = 3
    Whitebalance_Manual = 5


class Exposure(betterproto.Enum):
    """Mirrors flatbuffers techlab::Exposure"""

    Exposure_Auto = 0
    Exposure_Manual = 3
    Exposure_ShutterPriority = 10
    Exposure_IrisPriority = 11
    Exposure_Brightness = 13


class FlipMode(betterproto.Enum):
    """Mirrors flatbuffers techlab::FlipMode"""

    FlipMode_NoFlip = 0
    FlipMode_FlipH = 1
    FlipMode_FlipV = 2
    FlipMode_FlipHV = 3


class GNSSFix(betterproto.Enum):
    """Mirrors flatbuffers techlab::GNSSFixType"""

    GNSSFix_NoFix = 0
    GNSSFix_Time = 1
    GNSSFix_Fix2D = 2
    GNSSFix_Fix3D = 3
    GNSSFix_RTK = 4


class MotorFault(betterproto.Enum):
    MotorFault_None = 0
    MotorFault_Undervolt = 1
    MotorFault_Overload = 2
    MotorFault_Overtemp = 3
    MotorFault_Fault = 4


@dataclass
class Vector2(betterproto.Message):
    x: float = betterproto.double_field(1)
    y: float = betterproto.double_field(2)


@dataclass
class Vector2f(betterproto.Message):
    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)


@dataclass
class Vector3(betterproto.Message):
    x: float = betterproto.double_field(1)
    y: float = betterproto.double_field(2)
    z: float = betterproto.double_field(3)


@dataclass
class Vector3f(betterproto.Message):
    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)
    z: float = betterproto.float_field(3)


@dataclass
class Vector4(betterproto.Message):
    x: float = betterproto.double_field(1)
    y: float = betterproto.double_field(2)
    z: float = betterproto.double_field(3)
    w: float = betterproto.double_field(4)


@dataclass
class Vector4f(betterproto.Message):
    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)
    z: float = betterproto.float_field(3)
    w: float = betterproto.float_field(4)


@dataclass
class Transform(betterproto.Message):
    matrix: List[float] = betterproto.float_field(1)


@dataclass
class LightCommand(betterproto.Message):
    state: "LightState" = betterproto.enum_field(1)
    color: "Vector3f" = betterproto.message_field(2)


@dataclass
class BatteryDescriptor(betterproto.Message):
    state: "BatteryState" = betterproto.enum_field(1)
    state_of_charge: float = betterproto.float_field(2)
    current: float = betterproto.float_field(3)
    temperature: float = betterproto.float_field(4)
    cell_voltages: List[int] = betterproto.uint32_field(5)


@dataclass
class PowerInfo(betterproto.Message):
    power_flow: float = betterproto.float_field(1)
    energy: float = betterproto.float_field(2)


@dataclass
class Points(betterproto.Message):
    """Point cloud message"""

    data: bytes = betterproto.bytes_field(1)
    format: "PointFormat" = betterproto.enum_field(2)
    frame: str = betterproto.string_field(3)


@dataclass
class GetRobotStateRequest(betterproto.Message):
    pass


@dataclass
class GetRobotStateReply(betterproto.Message):
    control_state: "RobotControlState" = betterproto.enum_field(1)
    control_mode: "RobotControlMode" = betterproto.enum_field(2)


@dataclass
class TakeControlRequest(betterproto.Message):
    pass


@dataclass
class TakeControlReply(betterproto.Message):
    pass


@dataclass
class MotionRequest(betterproto.Message):
    linear_vel: "Vector2" = betterproto.message_field(1)
    angular_vel: float = betterproto.double_field(2)


@dataclass
class MotionReply(betterproto.Message):
    pass


@dataclass
class GotoRequest(betterproto.Message):
    steppoints: "Points" = betterproto.message_field(1)


@dataclass
class GotoReply(betterproto.Message):
    pass


@dataclass
class GetLightsRequest(betterproto.Message):
    pass


@dataclass
class GetLightsReply(betterproto.Message):
    lights: List[str] = betterproto.string_field(1)


@dataclass
class SetLightRequest(betterproto.Message):
    name: str = betterproto.string_field(1)
    command: "LightCommand" = betterproto.message_field(2)


@dataclass
class SetLightReply(betterproto.Message):
    pass


@dataclass
class GetBatteriesRequest(betterproto.Message):
    pass


@dataclass
class GetBatteriesReply(betterproto.Message):
    batteries: Dict[str, "BatteryDescriptor"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass
class GetPowerFlowRequest(betterproto.Message):
    pass


@dataclass
class GetPowerFlowReply(betterproto.Message):
    components: Dict[str, "PowerInfo"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass
class CameraDescriptor(betterproto.Message):
    config: "CameraConfig" = betterproto.message_field(1)
    position: "Vector3" = betterproto.message_field(2)


@dataclass
class CameraMovement(betterproto.Message):
    target: "Vector3" = betterproto.message_field(1)
    velocity: "Vector3" = betterproto.message_field(2)


@dataclass
class CameraConfig(betterproto.Message):
    power: bool = betterproto.bool_field(1)
    autofocus: bool = betterproto.bool_field(2)
    backlight_compensation: bool = betterproto.bool_field(3)
    flip_mode: "FlipMode" = betterproto.enum_field(4)
    ev: int = betterproto.int32_field(5)
    whitebalance: "Whitebalance" = betterproto.enum_field(6)
    whitebalance_temp: int = betterproto.uint32_field(7)
    ae: "Exposure" = betterproto.enum_field(8)
    black_and_white: bool = betterproto.bool_field(9)
    focus: int = betterproto.uint32_field(10)
    shutter_speed: int = betterproto.uint32_field(11)
    iris: float = betterproto.float_field(12)
    gain: int = betterproto.uint32_field(13)
    brightness: int = betterproto.uint32_field(14)


@dataclass
class GNSSDateTime(betterproto.Message):
    year: int = betterproto.uint32_field(1)
    month: int = betterproto.uint32_field(2)
    day: int = betterproto.uint32_field(3)
    hour: int = betterproto.uint32_field(4)
    minute: int = betterproto.uint32_field(5)
    second: int = betterproto.uint32_field(6)
    nano: int = betterproto.int32_field(7)


@dataclass
class GNSS(betterproto.Message):
    date_time: "GNSSDateTime" = betterproto.message_field(1)
    fix: "GNSSFix" = betterproto.enum_field(2)
    longitude: float = betterproto.double_field(3)
    latitude: float = betterproto.double_field(4)
    height: float = betterproto.float_field(5)
    velocity: "Vector3" = betterproto.message_field(6)
    ground_speed: float = betterproto.float_field(7)
    heading: float = betterproto.float_field(8)
    accuracy_xy: float = betterproto.float_field(9)
    accuracy_z: float = betterproto.float_field(10)
    accuracy_speed: float = betterproto.float_field(11)
    accuracy_yaw: float = betterproto.float_field(12)
    used_satellites: int = betterproto.uint32_field(13)


@dataclass
class FrameInfo(betterproto.Message):
    parents: List[str] = betterproto.string_field(1)
    inertial: bool = betterproto.bool_field(2)


@dataclass
class ListFramesRequest(betterproto.Message):
    pass


@dataclass
class ListFramesReply(betterproto.Message):
    frame_info: Dict[str, "FrameInfo"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass
class ResetFrameRequest(betterproto.Message):
    frame: str = betterproto.string_field(1)


@dataclass
class ResetFrameReply(betterproto.Message):
    pass


@dataclass
class GetWaypointsRequest(betterproto.Message):
    pass


@dataclass
class GetWaypointsReply(betterproto.Message):
    points: "Points" = betterproto.message_field(1)


@dataclass
class GetTransformRequest(betterproto.Message):
    frame: str = betterproto.string_field(1)
    parent: str = betterproto.string_field(2)


@dataclass
class GetTransformReply(betterproto.Message):
    transform: "Transform" = betterproto.message_field(1)


@dataclass
class GetGNSSRequest(betterproto.Message):
    pass


@dataclass
class GetGNSSReply(betterproto.Message):
    gnss: "GNSS" = betterproto.message_field(1)


@dataclass
class MotorDescriptor(betterproto.Message):
    fault: "MotorFault" = betterproto.enum_field(1)
    speed_rpm: float = betterproto.float_field(2)
    current: float = betterproto.float_field(3)
    voltage: float = betterproto.float_field(4)
    temperature: float = betterproto.float_field(5)


@dataclass
class GetModulesRequest(betterproto.Message):
    pass


@dataclass
class GetModulesReply(betterproto.Message):
    module_id: List[int] = betterproto.int32_field(1)


@dataclass
class GetPointCloudRequest(betterproto.Message):
    pass


@dataclass
class GetPointCloudReply(betterproto.Message):
    points: "Points" = betterproto.message_field(1)


@dataclass
class ListCamerasRequest(betterproto.Message):
    pass


@dataclass
class ListCamerasReply(betterproto.Message):
    cameras: Dict[str, "CameraDescriptor"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass
class SetCameraConfigRequest(betterproto.Message):
    name: str = betterproto.string_field(1)
    config: "CameraConfig" = betterproto.message_field(2)


@dataclass
class SetCameraConfigReply(betterproto.Message):
    pass


@dataclass
class MoveCameraRequest(betterproto.Message):
    name: str = betterproto.string_field(1)
    movement: "CameraMovement" = betterproto.message_field(2)


@dataclass
class MoveCameraReply(betterproto.Message):
    pass


@dataclass
class ResetCameraRequest(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass
class ResetCameraReply(betterproto.Message):
    pass


class BasicRobotControlStub(betterproto.ServiceStub):
    async def get_robot_state(self) -> GetRobotStateReply:
        request = GetRobotStateRequest()

        return await self._unary_unary(
            "/techlab.api.BasicRobotControl/GetRobotState",
            request,
            GetRobotStateReply,
        )

    async def take_control(self) -> TakeControlReply:
        request = TakeControlRequest()

        return await self._unary_unary(
            "/techlab.api.BasicRobotControl/TakeControl",
            request,
            TakeControlReply,
        )

    async def move(
        self, *, linear_vel: Optional["Vector2"] = None, angular_vel: float = 0
    ) -> MotionReply:
        request = MotionRequest()
        if linear_vel is not None:
            request.linear_vel = linear_vel
        request.angular_vel = angular_vel

        return await self._unary_unary(
            "/techlab.api.BasicRobotControl/Move",
            request,
            MotionReply,
        )

    async def goto(self, *, steppoints: Optional["Points"] = None) -> GotoReply:
        request = GotoRequest()
        if steppoints is not None:
            request.steppoints = steppoints

        return await self._unary_unary(
            "/techlab.api.BasicRobotControl/Goto",
            request,
            GotoReply,
        )

    async def get_lights(self) -> GetLightsReply:
        request = GetLightsRequest()

        return await self._unary_unary(
            "/techlab.api.BasicRobotControl/GetLights",
            request,
            GetLightsReply,
        )

    async def set_light(
        self, *, name: str = "", command: Optional["LightCommand"] = None
    ) -> SetLightReply:
        request = SetLightRequest()
        request.name = name
        if command is not None:
            request.command = command

        return await self._unary_unary(
            "/techlab.api.BasicRobotControl/SetLight",
            request,
            SetLightReply,
        )

    async def get_batteries(self) -> GetBatteriesReply:
        request = GetBatteriesRequest()

        return await self._unary_unary(
            "/techlab.api.BasicRobotControl/GetBatteries",
            request,
            GetBatteriesReply,
        )

    async def get_power_flow(self) -> GetPowerFlowReply:
        request = GetPowerFlowRequest()

        return await self._unary_unary(
            "/techlab.api.BasicRobotControl/GetPowerFlow",
            request,
            GetPowerFlowReply,
        )


class LocationStub(betterproto.ServiceStub):
    async def list_frames(self) -> ListFramesReply:
        request = ListFramesRequest()

        return await self._unary_unary(
            "/techlab.api.Location/ListFrames",
            request,
            ListFramesReply,
        )

    async def reset_frame(self, *, frame: str = "") -> ResetFrameReply:
        request = ResetFrameRequest()
        request.frame = frame

        return await self._unary_unary(
            "/techlab.api.Location/ResetFrame",
            request,
            ResetFrameReply,
        )

    async def get_waypoints(self) -> GetWaypointsReply:
        request = GetWaypointsRequest()

        return await self._unary_unary(
            "/techlab.api.Location/GetWaypoints",
            request,
            GetWaypointsReply,
        )

    async def stream_waypoints(self) -> AsyncGenerator[GetWaypointsReply, None]:
        request = GetWaypointsRequest()

        async for response in self._unary_stream(
            "/techlab.api.Location/StreamWaypoints",
            request,
            GetWaypointsReply,
        ):
            yield response

    async def get_transform(
        self, *, frame: str = "", parent: str = ""
    ) -> GetTransformReply:
        request = GetTransformRequest()
        request.frame = frame
        request.parent = parent

        return await self._unary_unary(
            "/techlab.api.Location/GetTransform",
            request,
            GetTransformReply,
        )

    async def stream_transform(
        self, *, frame: str = "", parent: str = ""
    ) -> AsyncGenerator[GetTransformReply, None]:
        request = GetTransformRequest()
        request.frame = frame
        request.parent = parent

        async for response in self._unary_stream(
            "/techlab.api.Location/StreamTransform",
            request,
            GetTransformReply,
        ):
            yield response

    async def get_g_n_s_s(self) -> GetGNSSReply:
        request = GetGNSSRequest()

        return await self._unary_unary(
            "/techlab.api.Location/GetGNSS",
            request,
            GetGNSSReply,
        )

    async def stream_g_n_s_s(self) -> AsyncGenerator[GetGNSSReply, None]:
        request = GetGNSSRequest()

        async for response in self._unary_stream(
            "/techlab.api.Location/StreamGNSS",
            request,
            GetGNSSReply,
        ):
            yield response


class OmnibotStub(betterproto.ServiceStub):
    async def get_modules(self) -> GetModulesReply:
        request = GetModulesRequest()

        return await self._unary_unary(
            "/techlab.api.Omnibot/GetModules",
            request,
            GetModulesReply,
        )


class TourelleStub(betterproto.ServiceStub):
    async def get_z_e_d2_point_cloud(self) -> GetPointCloudReply:
        request = GetPointCloudRequest()

        return await self._unary_unary(
            "/techlab.api.Tourelle/GetZED2PointCloud",
            request,
            GetPointCloudReply,
        )

    async def stream_z_e_d2_point_cloud(
        self,
    ) -> AsyncGenerator[GetPointCloudReply, None]:
        request = GetPointCloudRequest()

        async for response in self._unary_stream(
            "/techlab.api.Tourelle/StreamZED2PointCloud",
            request,
            GetPointCloudReply,
        ):
            yield response

    async def get_li_d_a_r_point_cloud(self) -> GetPointCloudReply:
        request = GetPointCloudRequest()

        return await self._unary_unary(
            "/techlab.api.Tourelle/GetLiDARPointCloud",
            request,
            GetPointCloudReply,
        )

    async def stream_li_d_a_r_point_cloud(
        self,
    ) -> AsyncGenerator[GetPointCloudReply, None]:
        request = GetPointCloudRequest()

        async for response in self._unary_stream(
            "/techlab.api.Tourelle/StreamLiDARPointCloud",
            request,
            GetPointCloudReply,
        ):
            yield response

    async def list_cameras(self) -> ListCamerasReply:
        request = ListCamerasRequest()

        return await self._unary_unary(
            "/techlab.api.Tourelle/ListCameras",
            request,
            ListCamerasReply,
        )

    async def set_camera_config(
        self, *, name: str = "", config: Optional["CameraConfig"] = None
    ) -> SetCameraConfigReply:
        request = SetCameraConfigRequest()
        request.name = name
        if config is not None:
            request.config = config

        return await self._unary_unary(
            "/techlab.api.Tourelle/SetCameraConfig",
            request,
            SetCameraConfigReply,
        )

    async def move_camera(
        self, *, name: str = "", movement: Optional["CameraMovement"] = None
    ) -> MoveCameraReply:
        request = MoveCameraRequest()
        request.name = name
        if movement is not None:
            request.movement = movement

        return await self._unary_unary(
            "/techlab.api.Tourelle/MoveCamera",
            request,
            MoveCameraReply,
        )

    async def reset_camera(self, *, name: str = "") -> ResetCameraReply:
        request = ResetCameraRequest()
        request.name = name

        return await self._unary_unary(
            "/techlab.api.Tourelle/ResetCamera",
            request,
            ResetCameraReply,
        )
